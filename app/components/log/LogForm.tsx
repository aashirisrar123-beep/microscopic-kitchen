"use client";

import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Exercise, WorkoutLog, WorkoutExercise } from '@/types';
import { getExercises, addWorkoutLog } from '@/lib/utils';
import { Calendar } from '@/components/ui/calendar';
import { Card, CardHeader, CardTitle, CardContent, CardFooter } from '@/components/ui/card';

interface LogFormProps {
  onAddLog: (log: WorkoutLog) => void;
}

export default function LogForm({ onAddLog }: LogFormProps) {
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const [exercises, setExercises] = useState<Exercise[]>([]);
  const [logEntries, setLogEntries] = useState<WorkoutExercise[]>([]);
  const [currentExercise, setCurrentExercise] = useState<string>('');
  const [error, setError] = useState<string>('');

  useEffect(() => {
    setExercises(getExercises());
  }, []);

  const handleAddExerciseToLog = () => {
    if (!currentExercise) {
      setError('Please select an exercise.');
      return;
    }
    setError('');
    // Check if the exercise is already added to prevent duplicates in the current log entry
    if (logEntries.some(entry => entry.exerciseId === currentExercise)) {
      setError('Exercise already added to this log.');
      return;
    }
    
    const selectedEx = exercises.find(ex => ex.id === currentExercise);
    if (selectedEx) {
      const newEntry: WorkoutExercise = { exerciseId: currentExercise };
      setLogEntries(prev => [...prev, newEntry]);
    }
  };

  const handleMetricChange = (exerciseId: string, metric: keyof WorkoutExercise, value: string) => {
    setLogEntries(prev =>
      prev.map(entry =>
        entry.exerciseId === exerciseId ? { ...entry, [metric]: value } : entry
      )
    );
  };

  const handleSaveLog = () => {
    if (!selectedDate) {
      setError('Please select a date.');
      return;
    }
    if (logEntries.length === 0) {
      setError('Please add at least one exercise to the log.');
      return;
    }

    // Basic validation for metrics based on exercise type
    let isValid = true;
    for (const entry of logEntries) {
      const exercise = exercises.find(ex => ex.id === entry.exerciseId);
      if (!exercise) {
        setError(`Invalid exercise found in log.`);
        isValid = false;
        break;
      }

      if (exercise.type === 'Strength') {
        if (entry.sets === undefined || entry.reps === undefined || entry.weight === undefined) {
          setError(`Please provide sets, reps, and weight for ${exercise.name}.`);
          isValid = false;
          break;
        }
        if (isNaN(Number(entry.sets)) || isNaN(Number(entry.reps)) || isNaN(Number(entry.weight))) {
           setError(`Sets, reps, and weight must be numbers for ${exercise.name}.`);
           isValid = false;
           break;
        }
      } else if (exercise.type === 'Cardio' || exercise.type === 'Bodyweight') {
        if (!entry.duration && !entry.distance) {
           setError(`Please provide duration or distance for ${exercise.name}.`);
           isValid = false;
           break;
        }
      }
    }

    if (!isValid) return;

    setError('');
    const newLog: WorkoutLog = {
      id: '', // Will be generated by addWorkoutLog
      date: selectedDate.toISOString().split('T')[0], // Format as YYYY-MM-DD
      exercises: logEntries,
    };
    const savedLog = addWorkoutLog(newLog);
    onAddLog(savedLog);
    setLogEntries([]); // Clear entries after saving
    // Optionally clear selected date or reset form
    // setSelectedDate(new Date()); // Reset to today
  };

  // Determine available exercises to select from (those not already in logEntries)
  const availableExercises = exercises.filter(ex => !logEntries.some(entry => entry.exerciseId === ex.id));

  return (
    <Card className="w-full shadow-md mb-6">
      <CardHeader>
        <CardTitle>Log New Workout</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="space-y-2">
          <Label htmlFor="log-date">Date</Label>
          <Calendar
            mode="single"
            selected={selectedDate}
            onSelect={setSelectedDate}
            className="rounded-md border w-full"
            required
          />
        </div>

        <div className="space-y-4 border p-4 rounded-md bg-gray-50">
          <h4 className="font-semibold text-md">Add Exercises to Log</h4>
          <div className="flex flex-col md:flex-row gap-4 items-end">
            <div className="w-full md:w-1/2 space-y-2">
              <Label htmlFor="exercise-select">Select Exercise</Label>
              <Select value={currentExercise} onValueChange={setCurrentExercise}>
                <SelectTrigger>
                  <SelectValue placeholder="Select an exercise" />
                </SelectTrigger>
                <SelectContent>
                  {availableExercises.length === 0 ? (
                    <SelectItem value="" disabled>No more exercises available</SelectItem>
                  ) : (
                    availableExercises.map(ex => (
                      <SelectItem key={ex.id} value={ex.id}>{ex.name} ({ex.type})</SelectItem>
                    ))
                  )}
                </SelectContent>
              </Select>
            </div>
            <Button onClick={handleAddExerciseToLog} className="w-full md:w-auto">Add to Log</Button>
          </div>
          {error && <p className="text-red-500 text-sm">{error}</p>}
        </div>

        {logEntries.length > 0 && (
          <div className="space-y-4">
            <h4 className="font-semibold text-md">Workout Details</h4>
            {logEntries.map((entry, index) => {
              const exercise = exercises.find(ex => ex.id === entry.exerciseId);
              const exerciseName = exercise ? exercise.name : 'Unknown';
              const exerciseType = exercise ? exercise.type : '';

              return (
                <div key={entry.exerciseId} className="border p-4 rounded-md bg-white shadow-sm">
                  <div className="flex justify-between items-center mb-2">
                    <p className="font-medium capitalize">{exerciseName} ({exerciseType})</p>
                    <Button variant="outline" size="sm" onClick={() => setLogEntries(prev => prev.filter(e => e.exerciseId !== entry.exerciseId))}>Remove</Button>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                    {exerciseType === 'Strength' && (
                      <> 
                        <div className="space-y-1">
                          <Label>Sets</Label>
                          <Input 
                            type="number" 
                            value={entry.sets ?? ''} 
                            onChange={(e) => handleMetricChange(entry.exerciseId, 'sets', e.target.value)} 
                            min="1"
                          />
                        </div>
                        <div className="space-y-1">
                          <Label>Reps</Label>
                          <Input 
                            type="number" 
                            value={entry.reps ?? ''} 
                            onChange={(e) => handleMetricChange(entry.exerciseId, 'reps', e.target.value)} 
                            min="1"
                          />
                        </div>
                        <div className="space-y-1">
                          <Label>Weight (kg)</Label>
                          <Input 
                            type="number" 
                            value={entry.weight ?? ''} 
                            onChange={(e) => handleMetricChange(entry.exerciseId, 'weight', e.target.value)} 
                            min="0" 
                            step="0.1"
                          />
                        </div>
                      </>
                    )}
                    {(exerciseType === 'Cardio' || exerciseType === 'Bodyweight') && (
                      <> 
                        <div className="space-y-1">
                          <Label>Duration</Label>
                          <Input 
                            type="text" 
                            value={entry.duration ?? ''} 
                            onChange={(e) => handleMetricChange(entry.exerciseId, 'duration', e.target.value)} 
                            placeholder="e.g., 30 min" 
                          />
                        </div>
                        <div className="space-y-1">
                          <Label>Distance</Label>
                          <Input 
                            type="text" 
                            value={entry.distance ?? ''} 
                            onChange={(e) => handleMetricChange(entry.exerciseId, 'distance', e.target.value)} 
                            placeholder="e.g., 5 km" 
                          />
                        </div>
                        <div className="col-span-1 md:col-span-1"></div> {/* Spacer for alignment */}
                      </>
                    )}
                  </div>
                </div>
              );
            })}
          </div>
        )}
      </CardContent>
      <CardFooter>
        <Button onClick={handleSaveLog} disabled={logEntries.length === 0} className="w-full">Save Workout Log</Button>
      </CardFooter>
    </Card>
  );
}
